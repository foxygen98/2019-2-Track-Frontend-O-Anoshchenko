{"version":3,"sources":["styles/Translate.module.css","utils/translate/constants.ts","utils/translate/get_api_url.ts","utils/translate/Cache.ts","utils/translate/translate.ts","utils/translate/index.ts","types/constants.tsx","components/TextWindow.tsx","components/Translate.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","api_key","api_url","get_api_url","param","format","encodeURI","text","lang","cache","checkCache","saveCache","data","fetch","require","translate","a","url","res","result","method","then","response","json","catch","err","TranslateUtils","languages","RUSSIAN","ENGLISH","DETECT","Translate","useState","setLang","Tlang","setTLang","input","setInput","code","translated","setTranslated","leftPress","setLeftPress","rightPress","setRightPress","newTranslate","toLang","fromLang","inputText","transl","LangName","props","style","styles","Name","pressButt","Press","className","onClick","for","ChangeLang","useEffect","Box","LangSelectionLeft","InputLeft","onKeyPress","event","charCode","preventDefault","onChange","target","value","LangSelectionRight","disabled","InputRight","TranslateBlock","TextWindow","App","header","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.91082d7d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Translate_header__29sYT\",\"TranslateBlock\":\"Translate_TranslateBlock__1X1Q3\",\"InputRight\":\"Translate_InputRight__T8QhZ\",\"InputLeft\":\"Translate_InputLeft__2a0Cu\",\"LangSelectionLeft\":\"Translate_LangSelectionLeft__rmPh_\",\"LangSelectionRight\":\"Translate_LangSelectionRight__2mWaf\",\"Name\":\"Translate_Name__1RFjO\",\"Box\":\"Translate_Box__-s4xw\",\"Press\":\"Translate_Press__1HJdz\"};","export const api_key: string = 'trnsl.1.1.20200416T185913Z.02ec96c0555185bf.e2116c8ca8c9d634d927b802fa065cf2c9349273'\nexport const api_url: string = 'https://translate.yandex.net/api/v1.5/tr.json/translate'\n","import {api_key, api_url} from './constants'\nimport * as T from './types'\n\nexport default function get_api_url (param: T.ITranslate): string {\n    if (param.format) {\n        return encodeURI(`${api_url}?key=${api_key}&text=${param.text}&lang=${param.lang}&format=${param.format}`)\n    }\n    return encodeURI(`${api_url}?key=${api_key}&text=${param.text}&lang=${param.lang}`)\n}\n","import * as T from './types'\n\nvar cache: T.ICache = {}\n\nexport default function checkCache(param: T.ITranslate): T.ITranslate | undefined {\n    if (cache[`${param.text}${param.lang}`]) {\n        return cache[`${param}${param.lang}`]\n    }\n}\n\nexport function saveCache(param: T.ITranslate, data: T.IAPIResponse): void {\n    cache[`${param}${param.lang}`] = data\n}\n","import * as T from './types'\nimport get_api_url from './get_api_url'\nimport checkCache from './Cache'\nimport { saveCache } from './Cache'\n\nconst fetch = require(\"node-fetch\")\n\nexport async function translate(param: T.ITranslate): Promise<T.IAPIResponse> {\n    const url: string = get_api_url(param)\n    const res: any = checkCache(param)\n    if (res) {\n        return res\n    }\n    const result = fetch(url, {method: 'POST'})\n        .then((response: any) => response.json())\n        .then((data: T.IAPIResponse) => {\n            saveCache(param, data)\n            return data\n        })\n        .catch((err: T.IErrorResponse) => {\n            return err\n        })\n    return result\n}\n","import * as TranslateUtils from './translate'\n\nexport default TranslateUtils\n","import * as T from './types'\n\nexport const languages: T.ILang = {\n    RUSSIAN: 'ru',\n    ENGLISH: 'en',\n    DETECT: ''\n}","import React, { useState, useEffect } from 'react';\nimport styles from '../styles/Translate.module.css'\nimport * as T from '../types/types'\nimport * as TU from '../utils/translate/types'\nimport TranslateUtils from '../utils/translate'\nimport { languages } from '../types/constants'\n\nfunction Translate() {\n    const [lang, setLang]: [string, React.Dispatch<React.SetStateAction<string>>] = useState<string>('DETECT')\n    const [Tlang, setTLang]: [string, React.Dispatch<React.SetStateAction<string>>] = useState<string>('RUSSIAN')\n    const [input, setInput]: [string, React.Dispatch<React.SetStateAction<string>>] = useState<string>('')\n    const [translated, setTranslated] = useState<TU.IAPIResponse>({ code: 200, lang: '', text: [''] })\n    const [leftPress, setLeftPress] = useState<string>('DETECT')\n    const [rightPress, setRightPress] = useState<string>('DETECT')\n\n    function ChangeLang(props: T.IProps): void {\n        if (props.for === 'from') {\n            setLang(props.lang)\n            setLeftPress(props.lang)\n        } else {\n            setTLang(props.lang)\n            setRightPress(props.lang)\n        }\n    }\n\n    function handleSubmit(event: React.KeyboardEvent<HTMLTextAreaElement>): void {\n        if (event.charCode === 13) {\n            event.preventDefault()\n            newTranslate()\n        }\n    }\n\n    async function newTranslate(): Promise<void> {\n        if (input !== '') {\n            const fromLang = languages[lang]\n            let toLang = languages[Tlang]\n            if (fromLang !== '') {\n                toLang = `${fromLang}-${toLang}`\n            }\n            const inputText: TU.ITranslate[] = [{\n                text: [input],\n                lang: toLang\n            }]\n            const transl = await TranslateUtils.translate(inputText[0])\n            setTranslated(transl)\n        } else {\n            setTranslated({ code: 200, lang: '', text: [''] })\n        }\n    }\n\n    function textChange(event: React.ChangeEvent<HTMLTextAreaElement>): void {\n        setInput(event.target.value)\n    }\n\n    function LangName(props: T.IProps) {\n        let style = styles.Name\n        if (props.lang === props.pressButt) {\n            style = `${styles.Name} ${styles.Press}`\n        }\n        return (\n            <button className={style} onClick={() => ChangeLang(props)}>{props.lang}</button>\n        )\n    }\n\n    useEffect(() => {\n        newTranslate()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [lang, Tlang, input])\n\n    return (\n        <>\n            <div className={styles.Box}>\n                <div>\n                    <div className={styles.LangSelectionLeft}>\n                        <LangName lang={'DETECT'} for={'from'} pressButt={leftPress} />\n                        <LangName lang={'ENGLISH'} for={'from'} pressButt={leftPress} />\n                        <LangName lang={'RUSSIAN'} for={'from'} pressButt={leftPress} />\n                    </div>\n                    <textarea className={styles.InputLeft} onKeyPress={handleSubmit} onChange={textChange} value={input} />\n                </div>\n                <div>\n                    <div className={styles.LangSelectionRight}>\n                        <LangName lang={'ENGLISH'} for={'to'} pressButt={rightPress} />\n                        <LangName lang={'RUSSIAN'} for={'to'} pressButt={rightPress} />\n                    </div>\n                    <textarea disabled className={styles.InputRight} value={translated.text} />\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Translate;\n","import React from 'react';\nimport styles from '../styles/Translate.module.css'\nimport TextWindow from './TextWindow'\n\nfunction Translate() {\n    return (\n      <div className={styles.TranslateBlock}>\n        <TextWindow />\n      </div>\n    );\n  }\n  \nexport default Translate;","import React from 'react';\nimport styles from '../styles/Translate.module.css'\nimport Translate from './Translate'\n\nfunction App() {\n  return (\n    <>\n      <div className={styles.header}>TechnoTrack Translate</div>\n      <hr />\n      <Translate />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}